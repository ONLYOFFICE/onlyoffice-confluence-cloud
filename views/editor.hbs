{{!< layout}}

<div id="errorBlock" class="padded" hidden>
    <div class="error-block">
        <div class="error-image">
            <img src="/image/error.svg">
        </div>
        <div class="error-message-block">
            <h1>Unavailable Document Server</h1>
            <p class="error-message">{{__ "ONLYOFFICE cannot be reached. Please contact admin."}}</p>
        </div>
    </div>
</div>

<div id="placeholder"></div>
<script> 
    $(document).ready(function() {
        if (typeof DocsAPI === "undefined") {
            $("#errorBlock").show();
            return;
        }

        if (error = "{{error}}") {
            alert(error);
            return;
        }

        var docEditor;

        var onRequestReferenceData = function(event) {
            var xhr = new XMLHttpRequest();
            xhr.open("POST", "reference-data?pageId=" + "{{pageId}}");
            xhr.setRequestHeader("Authorization", "JWT " + "{{token}}");
            xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
            xhr.send(JSON.stringify(event.data));

            xhr.onreadystatechange = function() {
                if (xhr.readyState != 4) return;
                if (xhr.status == 200) {
                    docEditor.setReferenceData(JSON.parse(xhr.responseText));
                } else if (xhr.status == 403) {
                    docEditor.setReferenceData({error: "{{__ "You are not permitted to perform this operation."}}"});
                } else if (xhr.status == 404) {
                    docEditor.setReferenceData({error: "{{__ "Attachment File Not Found"}}"});
                } else {
                    docEditor.setReferenceData({error: "{{__ "Unknown error"}}"});
                }
            }
        };

        var onRequestOpen = function(event) {
            const windowName = event.data.windowName;
            const attachmentId = event.data.referenceData.fileKey;

            window.open("{{{editorUrl}}}" + attachmentId.substring(3), windowName);
        };

        let jsonEditorConfig = JSON.parse(`{{{editorConfig}}}`);

        var config = {
            "events" : {
                "onRequestReferenceData": onRequestReferenceData,
                "onRequestOpen": onRequestOpen
            },
        };

        Object.assign(jsonEditorConfig, config);

        const locale = new Promise(function(resolve, reject) {
            AP.user.getLocale(function(lc) {
                resolve(lc);
            });
        });

        const timeZone = new Promise(function(resolve, reject) {
            AP.user.getTimeZone(function(tz) {
                resolve(tz);
            });
        });

        Promise.all([locale, timeZone]).then(values => {
            jsonEditorConfig.document.info.uploaded = new Date(jsonEditorConfig.document.info.uploaded).toLocaleString(values[0].replace("_", "-"), {timeZone: values[1]});
            jsonEditorConfig.editorConfig.lang = values[0].replace("_", "-");

            docEditor = new DocsAPI.DocEditor("placeholder", jsonEditorConfig);
        });
    });
</script>
